# bot.py
import logging
import sqlite3
import os
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.environ.get("BOT_TOKEN")  # <-- –î–æ–±–∞–≤—å —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç –≤ Render (Environment Variables)
ADMIN_IDS = [123456789]  # <-- –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
DB_PATH = "bot.db"

# --- –õ–æ–≥–≥–∏–Ω–≥ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
                        telegram_id INTEGER PRIMARY KEY,
                        name TEXT,
                        is_admin INTEGER DEFAULT 0
                    )''')
        c.execute('''CREATE TABLE IF NOT EXISTS tasks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        assigned_to INTEGER,
                        text TEXT,
                        difficulty INTEGER,
                        assigned_at TEXT,
                        deadline TEXT,
                        status TEXT DEFAULT 'active'
                    )''')
        c.execute('''CREATE TABLE IF NOT EXISTS reports (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        task_id INTEGER,
                        user_id INTEGER,
                        report_text TEXT,
                        photo_file_id TEXT,
                        submitted_at TEXT,
                        status TEXT DEFAULT 'pending'
                    )''')
        c.execute('''CREATE TABLE IF NOT EXISTS rewards (
                        user_id INTEGER,
                        points INTEGER
                    )''')
        conn.commit()

# --- –ü–æ–º–æ—â–Ω–∏–∫–∏ ---
def get_user_points(user_id):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("SELECT SUM(points) FROM rewards WHERE user_id=?", (user_id,))
        result = c.fetchone()[0]
        return result or 0

def is_admin(user_id):
    return user_id in ADMIN_IDS

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (telegram_id, name, is_admin) VALUES (?, ?, ?)",
                  (user.id, user.full_name, int(is_admin(user.id))))
        conn.commit()

    buttons = [["üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç"], ["üèÜ –ú–æ–∏ –±–∞–ª–ª—ã"]]
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏—è–º?",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è":
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT id, text, deadline FROM tasks WHERE assigned_to=? AND status='active'", (user_id,))
            task = c.fetchone()
            if task:
                await update.message.reply_text(f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task[1]}\n‚è∞ –°—Ä–æ–∫ –¥–æ: {task[2]}")
            else:
                await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚Äî —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!")

    elif text == "üèÜ –ú–æ–∏ –±–∞–ª–ª—ã":
        points = get_user_points(user_id)
        await update.message.reply_text(f"–£ —Ç–µ–±—è {points} –±–∞–ª–ª–æ–≤ üèÖ")

    elif text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏—Ö –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        context.user_data["waiting_for_report"] = True

# --- –ü—Ä–∏—ë–º –æ—Ç—á—ë—Ç–æ–≤ ---
async def handle_photo(update: Update, context: CallbackContext):
    if context.user_data.get("waiting_for_report"):
        user_id = update.effective_user.id
        photo = update.message.photo[-1].file_id
        caption = update.message.caption or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"

        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT id FROM tasks WHERE assigned_to=? AND status='active'", (user_id,))
            task = c.fetchone()
            if task:
                now = datetime.now().isoformat()
                c.execute("INSERT INTO reports (task_id, user_id, report_text, photo_file_id, submitted_at) VALUES (?, ?, ?, ?, ?)",
                          (task[0], user_id, caption, photo, now))
                conn.commit()
                await update.message.reply_text("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π –ø—Ä–æ–≤–µ—Ä–∫–∏. üïµÔ∏è")
                context.user_data["waiting_for_report"] = False
            else:
                await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")

# --- –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ ---
async def add_task(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_task <telegram_id> <—É—Ä–æ–≤–µ–Ω—å> <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è>")
        return

    assigned_id = int(args[0])
    level = int(args[1])
    text = " ".join(args[2:])
    now = datetime.now()
    deadline = now + timedelta(hours=6)

    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT INTO tasks (assigned_to, text, difficulty, assigned_at, deadline) VALUES (?, ?, ?, ?, ?)",
                  (assigned_id, text, level, now.isoformat(), deadline.isoformat()))
        conn.commit()

    await update.message.reply_text("–ó–∞–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ ‚úÖ")

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ ---
def check_deadlines(context: CallbackContext):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        now = datetime.now().isoformat()
        c.execute("SELECT id, assigned_to FROM tasks WHERE status='active' AND deadline<?", (now,))
        expired = c.fetchall()
        for task_id, user_id in expired:
            context.bot.send_message(user_id, "‚è∞ –í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ!")
            c.execute("UPDATE tasks SET status='expired' WHERE id=?", (task_id,))
        conn.commit()

# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_task", add_task))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    scheduler = BackgroundScheduler()
    scheduler.add_job(check_deadlines, "interval", minutes=1, args=[app.bot])
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == '__main__':
    import asyncio

    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise

